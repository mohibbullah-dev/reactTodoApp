import React, { useState } from 'react'

const TodoApp = () => {
const [tasks, setTasks] = useState([]);
const [newtask, setNewtask] = useState('');

const addTask=()=>{
if (newtask.trim()==='') {
 alert('please enter a task!')
  return;
}

setTasks([...tasks, {id: Date.now(), text:newtask, isediting: false}]);
setNewtask('');
}

const deleteTask= (id)=>{
  setTasks(tasks.filter((task)=>task.id !==id))
}

const toggleEditTask = (id)=>{
setTasks(
  tasks.map((task)=>
  task.id===id? {...task,isediting: !task.isediting}: task
 )
)
}

const updateTask=(id, newtask)=>{
  setTasks(
    tasks.map((task)=>
      task.id===id? {...task,text: newtask}: task
    )
  )
};


  return (
    <div className='container h-[100vh] flex justify-center items-center m-auto bg-blue-950'
    >
     <div className=
     'flex flex-col bg-white p-5 w-lg rounded-md shadow-me'
     >
     <h2 className='text-blue-400 font-bold text-5xl text-center'>Todo-App</h2>
     <div className='flex py-2 px-4 gap-2.5 mt-10'>
        <input
        className='flex-1 outline-none py-2
         px-4 focus:outline-none focus:ring-2
          border-1 border-gray-300 rounded-md focus:ring-blue-400 text-md
         '
         type="text"
         value={newtask}
         onChange={(e)=> setNewtask(e.target.value)}
         placeholder='Add a new task...'
         />

         <button
         onClick={addTask}
         className='py-2 px-4 focus:outline-none bg-blue-400
        rounded-md text-white transition cursor-pointer
         hover:bg-blue-500 font-semibold '
         >
         Add task
         </button>
     </div>

     <div className=''>
      <ul className='space-y-3 bg-white p-4  rounded-md'>
      {
        tasks.map((task)=>(
            <li key={task.id}
            className=' flex py-4 px-4 gap-2.5 bg-amber-50   border-1 border-gray-300 rounded-md'
            >
              {task.isediting?(
                <input 
                className='flex-1 outline-none py-2
         px-4 focus:outline-none focus:ring-2 bg-white
          border-1 border-gray-300 rounded-md focus:ring-blue-400 text-md'
                type="text"
                value={task.text}
                onChange={(e)=>updateTask( task.id,e.target.value)}
                 />
              ):(<span className='flex-1 py-2 px-4 focus:outline-none
        rounded-md transition cursor-pointer '>{task.text}</span>)}

                <div className=' flex gap-3'>
                  <button
                  className='py-2 px-4 focus:outline-none bg-blue-400
        rounded-md text-white transition cursor-pointer
         hover:bg-blue-500 font-semibold'
                  onClick={()=>toggleEditTask(task.id)}
                  >
                    {task.isediting? 'save' : 'edit'}
                    </button>
                     
                     <button
                     onClick={()=> deleteTask(task.id)}
                     className='py-2 px-4 focus:outline-none rounded-md text-white transition cursor-pointer font-semibold bg-red-400 hover:bg-red-500'
                     >
                      delete
                     </button>
                </div>
            </li>
          )
        )
      }






{/* 

<ul className="space-y-3">
  {tasks.map((task) => (
    <li
      key={task.id}
      className="flex items-center justify-between p-3 border rounded-lg bg-gray-50"
    >
      {task.isEditing ? (
        <input
          type="text"
          value={task.text}
          onChange={(e) => updateTaskText(task.id, e.target.value)}
          className="flex-1 px-2 py-1 border rounded-lg"
        />
      ) : (
        <span className="flex-1 px-2 text-gray-800">{task.text}</span>
      )}
      <div className="flex gap-2">
        <button
          onClick={() => toggleEditTask(task.id)}
          className="px-3 py-1 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition"
        >
          {task.isEditing ? 'Save' : 'Edit'}
        </button>
        <button
          onClick={() => deleteTask(task.id)}
          className="px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
        >
          Delete
        </button>
      </div>
    </li>
  ))}
</ul> */}










      </ul>
     </div>
     


     </div>
     
     
    </div>
  )
}

export default TodoApp


